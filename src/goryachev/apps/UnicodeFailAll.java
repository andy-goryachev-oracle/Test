/*
 * Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package goryachev.apps;

import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.embed.swing.SwingNode;
import javafx.geometry.Orientation;
import javafx.scene.Scene;
import javafx.scene.control.SplitPane;
import javafx.scene.control.TextArea;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

/**
 * Many different Unicode scripts in TextArea/JTextArea.
 */
public class UnicodeFailAll extends Application {
    public static void main(String[] args) {
        Application.launch(UnicodeFailAll.class, args);
    }

    @Override
    public void start(Stage stage) throws Exception {
        String text = generateText();
        
        TextArea textField = new TextArea(text);
//        textField.setStyle("-fx-font-size:150%;");
        
        BorderPane bp = new BorderPane();

        SwingNode swingNode = new SwingNode();
        SwingUtilities.invokeLater(() -> {
            JTextArea t = new JTextArea(text);
            swingNode.setContent(new JScrollPane(t));
            
            Platform.runLater(() -> {
                bp.setCenter(swingNode);
            });
        });

        SplitPane split = new SplitPane(textField, bp);
        split.setOrientation(Orientation.HORIZONTAL);

        stage.setScene(new Scene(split));
        stage.setTitle("Unicode Failure 2 " + System.getProperty("java.version"));
        stage.setWidth(1200);
        stage.setHeight(1200);
        stage.show();
    }

    private String generateText() {
        // better list https://en.wikipedia.org/wiki/List_of_writing_systems
        StringBuilder sb = new StringBuilder();
        t(sb, "Arabic", "╪з┘Д╪╣╪▒╪и┘К╪й");
        t(sb, "Akkadian", "ЁТАЭЁТЕЧЁТБ║ЁТМС");
        t(sb, "Armenian", "╒░╒б╒╡╒е╓А╒з╒╢/╒░╒б╒╡╒е╓А╒е╒╢");
        t(sb, "Assamese", "ржЕрж╕ржорзАржпрж╝рж╛");
        t(sb, "Awadhi", "рдЕрд╡рдзреА/рдФрдзреА");
        t(sb, "Bagheli", "рдмрдШреЗрд▓реА");
        t(sb, "Bagri", "рдмрд╛рдЧрдбрд╝реА, ╪и╪з┌п┌С█М");
        t(sb, "Bengali", "ржмрж╛ржВрж▓рж╛");
        t(sb, "Bhojpuri", "ЁСВжЁСВ╖ЁСВФЁСВгЁСВ│ЁСВйЁСВ▓");
        t(sb, "Braille", "таГтаЧтаЗ");
        t(sb, "Bundeli", "рдмреБрдиреНрджреЗрд▓реА");
        t(sb, "Burmese", "сАЩсА╝сАФсА║сАЩсАм");
        t(sb, "Cherokee", "сПгсО│сОй сОжсПмсПВсОпсПНсПЧ");
        t(sb, "Chhattisgarhi", "рдЫрддреНрддреАрд╕рдЧрдврд╝реА, рмЫрмдрм┐рм╢рмЧрмбрм╝рм┐, рм▓рм░рм┐рмЖ");
        t(sb, "Chinese", "ф╕нцЦЗ");
        t(sb, "Czech", "─Мe┼бtina");
        t(sb, "Devanagari", "рджреЗрд╡рдирд╛рдЧрд░реА");
        t(sb, "Dhundhari", "рдвреВрдгреНрдврд╛рдбрд╝реА/ркврлВркгрлНркврк╛ркбрк╝рлА");
        t(sb, "Farsi", "┘Б╪з╪▒╪│█М");
        t(sb, "Garhwali", "рдЧрдврд╝рд╡рд│рд┐");
        t(sb, "Ge╩╜ez", "сМНсЛХсЛЭ");
        t(sb, "Greek", "╬Х╬╗╬╗╬╖╬╜╬╣╬║╬м");
        t(sb, "Georgian", "сГесГРсГасГЧсГгсГЪсГШ");
        t(sb, "Gujarati", "ркЧрлБркЬрк░рк╛ркдрлА");
        t(sb, "Harauti", "рд╣рд╛рдбрд╝реМрддреА, рд╣рд╛рдбрд╝реЛрддреА");
        t(sb, "Haryanvi", "рд╣рд░рдпрд╛рдгрд╡реА");
        t(sb, "Hebrew", "╫в╫С╫и╫Щ╫к");
        t(sb, "Hindi", "рд╣рд┐рдиреНрджреА");
        t(sb, "Inuktitut", "сРГсУДсТГсСОсСРсСж");
        t(sb, "Japanese", "цЧецЬмшкЮ уБЛуБк уВлуГК");
        t(sb, "Kangri", "рдХрд╛рдВрдЧрдбрд╝реА");
        t(sb, "Kannada", "р▓Хр▓ир│Нр▓ир▓б");
        t(sb, "Khmer", "сЮБсЯТсЮШсЯВсЮЪ");
        t(sb, "Khortha", "рдЦреЛрд░рдард╛");
        t(sb, "Korean", "эХЬъ╡ньЦ┤");
        t(sb, "Kumaoni", "рдХреБрдорд╛рдКрдБрдиреА");
        t(sb, "Magahi", "ЁСВзЁСВПЁСВпЁСВ▓/ЁСВзЁСВПЁСВбЁСВ▓");
        t(sb, "Maithili", "рдореИрдерд┐рд▓реА");
        t(sb, "Malayalam", "р┤ор┤▓р┤пр┤╛р┤│р┤В");
        t(sb, "Malvi", "рдорд╛рд│рд╡реА рднрд╛рд╖рд╛ / ркорк╛рк│рк╡рлА ркнрк╛рк╖рк╛");
        t(sb, "Marathi", "рдорд░рд╛рдареА");
        t(sb, "Marwari,", "рдорд╛рд░рд╡рд╛рдбрд╝реА");
        t(sb, "Meitei", "ъпГъпйъпЗъпйъпВъпгъпЯ");
        t(sb, "Mewari", "рдореЗрд╡рд╛рдбрд╝реА/ркорлЗрк╡рк╝рк╛ркбрк╝рлА");
        t(sb, "Mongolian", "саисавса╖садсансад");
        t(sb, "Nimadi", "рдирд┐рдорд╛рдбрд╝реА");
        t(sb, "Odia", "рмУрмбрм╝рм┐рмЖ");
        t(sb, "Punjabi", "рикрй░риЬри╛римрйА┘╛┘Ж┘Ш╪м╪з╪и█М");
        t(sb, "Pahari", "рдкрд╣рд╛рдбрд╝реА ┘╛█Б╪з┌С█М ");
        t(sb, "Rajasthani", "рд░рд╛рдЬрд╕реНрдерд╛рдиреА");
        t(sb, "Russian", "╨а╤Г╤Б╤Б╨║╨╕╨╣");
        t(sb, "Sanskrit", "рд╕рдВрд╕реНрдХреГрдд-, рд╕рдВрд╕реНрдХреГрддрдореН");
        t(sb, "Santali", "с▒ес▒Яс▒▒с▒Ыс▒Яс▒▓с▒д");
        t(sb, "Suret", "▄г▄Ш▄к▄Э▄м");
        t(sb, "Surgujia", "рд╕рд░рдЧреБрдЬрд┐рдпрд╛");
        t(sb, "Surjapuri", "рд╕реБрд░рдЬрд╛рдкреБрд░реА, рж╕рзБрж░ржЬрж╛ржкрзБрж░рзА");
        t(sb, "Tamil", "Tamiс╕╗");
        t(sb, "Telugu", "р░др▒Жр░▓р▒Бр░Чр▒Б");
        t(sb, "Thaana", "▐Л▐и▐И▐м▐А▐и");
        t(sb, "Thai", "р╣Др╕Чр╕в");
        t(sb, "Tibetan", "р╜Цр╜╝р╜Ср╝Л");
        t(sb, "Tulu", "р▓др│Бр▓│р│Б, р┤дтАНр╡Бр┤│тАНр╡Б");
        t(sb, "Turoyo", "▄Ы▄Ш▄к▄Э▄Р");
        t(sb, "Ukrainian", "╨г╨║╤А╨░╤Ч╨╜╤Б╤М╨║╨░");
        t(sb, "Urdu", "╪з╪▒╪п┘И");
        t(sb, "Vietnamese", "Tiс║┐ng Viс╗Зt");
        return sb.toString();
    }

    private void t(StringBuilder sb, String name, String text) {
        sb.append(name);
        sb.append(": ");
        sb.append(text);
        sb.append(" (");
        native2ascii(sb, text);
        sb.append(") \n");
    }

    protected static void native2ascii(StringBuilder sb, String text) {
        for (char c : text.toCharArray()) {
            if (c < 0x20) {
                escape(sb, c);
            } else if (c > 0x7f) {
                escape(sb, c);
            } else {
                sb.append(c);
            }
        }
    }

    protected static void escape(StringBuilder sb, char c) {
        sb.append("\\u");
        sb.append(h(c >> 12));
        sb.append(h(c >> 8));
        sb.append(h(c >> 4));
        sb.append(h(c));
    }

    protected static char h(int d) {
        return "0123456789abcdef".charAt(d & 0x000f);
    }
}
